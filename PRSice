---
title: "R Notebook"
output: html_notebook
---

# BASH/PLINK & Rstudio

# **Quality control on Base data/GWAS summary statistics**

```{r, message = FALSE}
#Load the needed packages
library(data.table)
library(tools)
library(magrittr)
library(tidyverse)
library(ggplot2)
```
```{r}
# Read the file
dat <- fread("C:\\...\\...\\Height.gwas.txt")
```
```{r}
#Display the head (first 10 rows)
head(dat)
```
#Make sure that the effect allele is identified!

```{r}
#Check the md5sum
md5sum("C:\\...\\...\\Height.gwas.txt")
```

```{r}
#GWAS Quality control
##Filter out SNPs according to Infoscore and MAF
result <- dat[INFO > 0.8 & MAF > 0.01]
result
```
```{r}
#How many SNPs have been filtered out?
length(dat$SNP) - length(result$SNP)
```
```{r}
#How many duplicate SNPs are present?
result$SNP[duplicated(result$SNP)]
```
```{r}
#Filter out duplicated SNPs
result <- result[!duplicated(result$SNP), ]
```

```{r}
#Filter out ambiguous SNPs
resultF <- subset(result,
                  (!result$A1 == "A" & result$A2 == "T") | 
                  (!result$A1 == "T" & result$A2 == "A") |
                  (!result$A1 == "G" & result$A2 == "C") |
                  (!result$A1 == "C" & result$A2 == "G"))
```
```{r}
#Save the result
fwrite(resultF, "C:\\...\\...\\Height.QC.txt", sep="\t")
```

# **Quality control on Target data**

```{r}
#Check the md5sum
md5sum("C:\\...\\...\\EUR.bed")
md5sum("C:\\...\\...\\EUR.bim")
md5sum("C:\\...\\...\\EUR.cov")
md5sum("C:\\...\\...\\EUR.fam")
md5sum("C:\\...\\...\\EUR.height")
```

```
# PLINK
##**Standard GWAS QC are perfomed in PLINK**
plink --bfile EUR --maf 0.01 --hwe 1e-6 --geno 0.01 --mind 0.01 --write-snplist --make-just-fam --out EUR.QC
#If error rise, include --must-have-sex

##**Pruning to remove highly correlated SNPs is perfomed in PLINK**
plink --bfile EUR --keep EUR.QC.fam --extract EUR.QC.snplist --indep-pairwise 200 50 0.25 --out EUR.QC

##**Heterozygosity rates are computed in PLINK**
plink --bfile EUR --extract EUR.QC.prune.in --keep EUR.QC.fam --het --out EUR.QC

##The file EUR.QC.het produced in this way containts F coefficient estimates for assessing heterozygosity.
```

```{r}
#Remove individuals with F coefficients that are more than 3SD from the mean
## Read in file
dat <- fread("C:\\...\\...\\EUR.QC.het")
## Get samples with F coefficient within 3 SD of the population mean
valid <- dat[F<=mean(F)+3*sd(F) & F>=mean(F)-3*sd(F)] 
# print FID and IID for valid samples
fwrite(valid[,c("FID","IID")], "C:\\...\\...\\EUR.valid.sample", sep="\t") 
```

```{r}
#Remove mismatching SNPs
#1 - Load: bim file, summary statistics, and QC SNP list
# Read in bim file 
bim <- fread("C:\\...\\...\\EUR.bim") %>%
    # Note: . represents the output from previous step. The syntax here means, setnames of the data read from the bim file, and replace the original column names by the new names
    setnames(., colnames(.), c("CHR", "SNP", "CM", "BP", "B.A1", "B.A2")) %>%
    # And immediately change the alleles to upper cases
    .[,c("B.A1","B.A2"):=list(toupper(B.A1), toupper(B.A2))]
# Read in summary statistic data (require data.table v1.12.0+)
height <- fread("C:\\...\\...\\Height.QC.txt") %>%
    # And immediately change the alleles to upper cases
    .[,c("A1","A2"):=list(toupper(A1), toupper(A2))]
# Read in QCed SNPs
qc <- fread("C:\\...\\...\\EUR.QC.snplist", header=F)
```
```{r}
#2 - Identify SNPs that require strand flipping
# Merge summary statistic with target
info <- merge(bim, height, by=c("SNP", "CHR", "BP")) %>%
    # And filter out QCed SNPs
    .[SNP %in% qc[,V1]]
# Function for calculating the complementary allele
complement <- function(x){
    switch (x,
        "A" = "T",
        "C" = "G",
        "T" = "A",
        "G" = "C",
        return(NA)
    )
} 
# Get SNPs that have the same alleles across base and target
info.match <- info[A1 == B.A1 & A2 == B.A2, SNP]
# Identify SNPs that are complementary between base and target
com.snps <- info[sapply(B.A1, complement) == A1 &
                    sapply(B.A2, complement) == A2, SNP]
# Now update the bim file
bim[SNP %in% com.snps, c("B.A1", "B.A2") :=
        list(sapply(B.A1, complement),
            sapply(B.A2, complement))]
```
```{r}
#3 - Identify SNPs that require recoding in the target (to ensure the coding allele in the target data is the effective allele in the base summary statistic)
# identify SNPs that need recoding
recode.snps <- info[B.A1==A2 & B.A2==A1, SNP]
# Update the bim file
bim[SNP %in% recode.snps, c("B.A1", "B.A2") :=
        list(B.A2, B.A1)]
# identify SNPs that need recoding & complement
com.recode <- info[sapply(B.A1, complement) == A2 &
                    sapply(B.A2, complement) == A1, SNP]
# Now update the bim file
bim[SNP %in% com.recode, c("B.A1", "B.A2") :=
        list(sapply(B.A2, complement),
            sapply(B.A1, complement))]
# Write the updated bim file
fwrite(bim[,c("SNP", "B.A1")], "C:\\...\\...\\EUR.a1", col.names=F, sep="\t")
```
#NEL TUTORIAL PER LA TS HO SOLO salvato POP2.a1 selezioanndo SNP e B.A1

```{r}
#4 - Identify SNPs that have different allele in base and target (usually due to difference in genome build or Indel)
mismatch <- bim[!(SNP %in% info.match |
                    SNP %in% com.snps |
                    SNP %in% recode.snps |
                    SNP %in% com.recode), SNP]
write.table(mismatch, "C:\\...\\...\\EUR.mismatch", quote=F, row.names=F, col.names=F)
```
```{r}
#Remove duplicate SNPs from target data
eur.bim <- read.table("C:\\...\\...\\EUR.a1", header = FALSE)
```
```{r}
eur.bim <- eur.bim[!duplicated(eur.bim$V1), ]
```
```{r}
fwrite(eur.bim, "C:\\...\\...\\EUR.a1", col.names=F, sep="\t")
```

# PLINK
```
## **Sex check is performed in PLINK**
plink --bfile EUR --extract EUR.QC.prune.in --keep EUR.valid.sample --check-sex --out EUR.QC
###This will generate a file called EUR.QC.sexcheck containing the F-statistics for each individual. Individuals are typically called as being biologically male if the F-statistic is > 0.8 and biologically female if F < 0.2.
```

```{r}
#Exclude individuals due to mismatch sex information.
# Read in file
valid <- fread("C:\\...\\...\\EUR.valid.sample")
dat <- fread("C:\\...\\...\\EUR.QC.sexcheck")[FID%in%valid$FID]
```
```{r}
fwrite(dat[STATUS=="OK",c("FID","IID")], "C:\\...\\...\\EUR.QC.valid", sep="\t")
```

# PLINK
```
##**Related individuals are excluded in PLINK**
plink --bfile EUR --extract EUR.QC.prune.in --keep EUR.QC.valid --rel-cutoff 0.125 --out EUR.QC
##**Final QC'ed target dataset is produced in PLINK**
plink --bfile EUR --make-bed --keep EUR.QC.rel.id --out EUR.QC --extract EUR.QC.snplist --exclude EUR.mismatch --a1-allele EUR.a1
```

#**PRS computation with PLINK**
```{r}
dat <- fread("C:\\...\\...\\Height.QC.txt")
fwrite(dat[,BETA:=log(OR)], "C:\\...\\...\\Height.QC.Transformed", sep="\t")
```

# PLINK
```
##**Linkage disequilibrium is accounted and clumping is performed in PLINK**
plink --bfile EUR.QC --clump-p1 1 --clump-r2 0.1 --clump-kb 250 --clump Height.QC.Transformed --clump-snp-field SNP --clump-field P --out EUR
```

```{r}
#Extract the SNP IDs list from target data
eur.clumped <- fread("C:\\...\\...\\EUR.clumped")
```
```{r}
eur.valid.snp <- eur.clumped$SNP
```
```{r}
fwrite(x = data.table(eur.valid.snp), file = "C:\\...\\...\\EUR.valid.snp", sep="\t")
```
```{r}
#Extract SNP ID list and p-value from base data
Height.QC.Transformed <- fread("C:\\...\\...\\Height.QC.Transformed")
```
```{r}
SNP.pvalue <- Height.QC.Transformed %>% select("SNP","P")
```
```{r}
fwrite(SNP.pvalue, "C:\\...\\...\\SNP.pvalue", sep="\t", col.names = FALSE)
```

##**A file containing the different P-value thresholds for inclusion of SNPs in the PRS is computed in PLINK.**
echo 0.001 0 0.001 > range_list 
echo 0.05 0 0.05 >> range_list
echo 0.1 0 0.1 >> range_list
echo 0.2 0 0.2 >> range_list
echo 0.3 0 0.3 >> range_list
echo 0.4 0 0.4 >> range_list
echo 0.5 0 0.5 >> range_list
#Pay attention that the thresholds in the range_list file MUST NOT be included in brackets ("").

# PLINK
```
##**The PRS is computed in PLINK.**
plink --bfile EUR.QC --score Height.QC.Transformed 3 4 12 header --q-score-range range_list SNP.pvalue --extract EUR.valid.snp --out EUR
##**We account for population stratification in Plink.**
##First, we perform pruning
plink --bfile EUR.QC --indep-pairwise 200 50 0.25 --out EUR
#Then we calculate the first 6 PCs
plink --bfile EUR.QC --extract EUR.prune.in --pca 6 --out EUR
##**Now we can search for the best-fit PRS.**
#The P-value threshold that provides the "best-fit" PRS under the C+T method is usually unknown. To approximate the "best-fit" PRS, we can perform a regression between PRS calculated at a range of P-value thresholds and then select the PRS that explains the highest phenotypic variance.
```

```{r}
#Set the P-value thresholds
p.threshold <- c(0.001,0.05,0.1,0.2,0.3,0.4,0.5)
#Read phenotype and PCs (eigenvectors) files
phenotype <- fread("C:\\...\\...\\EUR.height")
pcs <- fread("C:\\...\\...\\EUR.eigenvec", header=F) %>%
    setnames(., colnames(.), c("FID", "IID", paste0("PC",1:6)) )
covariate <- fread("C:\\...\\...\\EUR.cov")
pheno <- merge(phenotype, covariate) %>%
        merge(., pcs)
null.r2 <- summary(lm(Height~., data=pheno[,-c("FID", "IID")]))$r.squared
prs.result <- NULL
for(i in p.threshold){
    pheno.prs <- paste0("EUR.", i, ".profile") %>% #Paste0 is a more efficient form of "paste"
        fread(.) %>%
        .[,c("FID", "IID", "SCORE")] %>%
        merge(., pheno, by = c("FID", "IID"))
    model <- lm(Height~., data=pheno.prs[,-c("FID","IID")]) %>%
            summary
    model.r2 <- model$r.squared
    prs.r2 <- model.r2-null.r2
    prs.coef <- model$coeff["SCORE",]
    prs.result %<>% rbind(.,
        data.frame(Threshold=i, R2=prs.r2, 
                    P=as.numeric(prs.coef[4]), 
                    BETA=as.numeric(prs.coef[1]),
                    SE=as.numeric(prs.coef[2])))
}
print(prs.result[which.max(prs.result$R2),])
```

#**Compute the PRS with PRSice-2.**
#First of all, we need to combine the covariate file with the PCs file.

```{r}
#Read covariate and PCs files
covariate <- fread("C:\\...\\...\\EUR.cov")
pcs <- fread("C:\\...\\...\\EUR.eigenvec", header=F)
#Change colnames to pcs
colnames(pcs) <- c("FID","IID", paste0("PC",1:6))
#Merge covariate and pcs files
cov <- merge(covariate, pcs)
#Write a new file
fwrite(cov,"C:\\...\\...\\EUR.covariate", sep="\t")
```

# BASH
```
#**Now we can compute the PRS, using PRSice, in the shell.**
.\PRSice_win64.exe --base Height.QC.txt --target EUR.QC --binary-target F --pheno EUR.height --cov EUR.covariate --base-maf MAF:0.01 --base-info INFO:0.8 --stat OR --or --out EUR

#**Plot the PRSs**
```{r}
# generate a pretty format for p-value output
prs.result$print.p <- round(prs.result$P, digits = 3)
prs.result$print.p[!is.na(prs.result$print.p) &
                    prs.result$print.p == 0] <-
    format(prs.result$P[!is.na(prs.result$print.p) &
                            prs.result$print.p == 0], digits = 2)
prs.result$print.p <- sub("e", "*x*10^", prs.result$print.p)
# Initialize ggplot, requiring the threshold as the x-axis (use factor so that it is uniformly distributed)
ggplot(data = prs.result, aes(x = factor(Threshold), y = R2)) +
    # Specify that we want to print p-value on top of the bars
    geom_text(
        aes(label = paste(print.p)),
        vjust = -1.5,
        hjust = 0,
        angle = 45,
        cex = 4,
        parse = T
    )  +
    # Specify the range of the plot, *1.25 to provide enough space for the p-values
    scale_y_continuous(limits = c(0, max(prs.result$R2) * 1.25)) +
    # Specify the axis labels
    xlab(expression(italic(P) - value ~ threshold ~ (italic(P)[T]))) +
    ylab(expression(paste("PRS model fit:  ", R ^ 2))) +
    # Draw a bar plot
    geom_bar(aes(fill = -log10(P)), stat = "identity") +
    # Specify the colors
    scale_fill_gradient2(
        low = "dodgerblue",
        high = "firebrick",
        mid = "dodgerblue",
        midpoint = 1e-4,
        name = bquote(atop(-log[10] ~ model, italic(P) - value),)
    ) +
    # Some beautification of the plot
    theme_classic() + theme(
        axis.title = element_text(face = "bold", size = 18),
        axis.text = element_text(size = 14),
        legend.title = element_text(face = "bold", size =
                                        18),
        legend.text = element_text(size = 14),
        axis.text.x = element_text(angle = 45, hjust =
                                    1)
    )
# save the plot
ggsave("EUR.height.bar.png", height = 7, width = 7)
```

#Finally, we plot and check the relationship between the best-fit PRS and the phenotype.
```{r}
# Read in the files
prs <- read.table("EUR.0.3.profile", header=T)
height <- read.table("EUR.height", header=T)
sex <- read.table("EUR.cov", header=T)
# Rename the sex
sex$Sex <- as.factor(sex$Sex)
levels(sex$Sex) <- c("Male", "Female")
# Merge the files
dat <- merge(merge(prs, height), sex)
# Start plotting
ggplot(dat, aes(x=SCORE, y=Height, color=Sex))+
    geom_point()+
    theme_classic()+
    labs(x="Polygenic Score", y="Height")
```



    
    
    
